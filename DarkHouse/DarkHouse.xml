<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DarkHouse</name>
    </assembly>
    <members>
        <member name="T:DarkHouse.Behaviors.ILockable">
            <summary>
             ILockable Interface
            </summary>
            <remarks>Defines an lockable object</remarks>
        </member>
        <member name="M:DarkHouse.Behaviors.ILockable.IsLocked">
            <summary>
            Determines whether an object is locked
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
            <remarks>This method returns <see cref="T:System.Boolean"/> true if the object is locked</remarks>
        </member>
        <member name="M:DarkHouse.Behaviors.ILockable.IsLockable">
            <summary>
            Determines whether an object can be locked
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
            <remarks>This method returns <see cref="T:System.Boolean"/> true if the object can be locked</remarks>
        </member>
        <member name="M:DarkHouse.Behaviors.ILockable.Lock">
            <summary>
            Lock an object
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
            <remarks>This method returns <see cref="T:System.Boolean"/> true if the object is locked successfully</remarks>
        </member>
        <member name="M:DarkHouse.Behaviors.ILockable.Unlock">
            <summary>
            Unlock an object
            </summary>
            <returns></returns>
            <remarks>This method returns <see cref="T:System.Boolean"/> true if the object is unlocked successfully</remarks>
        </member>
        <member name="T:DarkHouse.Behaviors.IMoveable">
            <summary>
            IMoveable Interface
            </summary>
            <remarks>Defines a moveable object</remarks>
        </member>
        <member name="M:DarkHouse.Behaviors.IMoveable.Move">
            <summary>
            Move an object
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
            <remarks>This method returns <see cref="T:System.Boolean"/> true if the object is moving successfully</remarks>
        </member>
        <member name="M:DarkHouse.Behaviors.IMoveable.IsMoving">
            <summary>
            Determines whether the object is currently moving 
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
            <remarks>This method returns <see cref="T:System.Boolean"/> true if the object is currently moving</remarks>
        </member>
        <member name="M:DarkHouse.Behaviors.IMoveable.IsMoveable">
            <summary>
            Determines whether the object is moveable
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
            <remarks>This method returns <see cref="T:System.Boolean"/> true if the object is moveable</remarks>
        </member>
        <member name="M:DarkHouse.Behaviors.IMoveable.Stop">
            <summary>
            Stop an object
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
            <remarks>This method returns <see cref="T:System.Boolean"/> true if stopping the object is successful</remarks>
        </member>
        <member name="M:DarkHouse.Behaviors.IMoveable.IsStopped">
            <summary>
            Determines whether an object has been stopped
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
            <remarks>This method returns <see cref="T:System.Boolean"/> true if the object has been stopped</remarks>
        </member>
        <member name="M:DarkHouse.Behaviors.IMoveable.IsStoppable">
            <summary>
            Determines whether an object is capable of being stopped
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
            <remarks>This method returns <see cref="T:System.Boolean"/> true if the object is capable of being stopped</remarks>
        </member>
        <member name="T:DarkHouse.Behaviors.IOpenable">
            <summary>
            IOpenable Interface
            </summary>
            <remarks>Defines an openable object</remarks>
        </member>
        <member name="M:DarkHouse.Behaviors.IOpenable.Close">
            <summary>
            Close an object
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
            <remarks>This method returns <see cref="T:System.Boolean"/> true is closed successfully</remarks>
        </member>
        <member name="M:DarkHouse.Behaviors.IOpenable.Open">
            <summary>
            Open an object
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
            <remarks>This method returns <see cref="T:System.Boolean"/> true if the object is opened successfullky</remarks>
        </member>
        <member name="M:DarkHouse.Behaviors.IOpenable.IsOpen">
            <summary>
            Determines whether an object is currently open
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
            <remarks>This method returns <see cref="T:System.Boolean"/> true if the object is currently open</remarks>
        </member>
        <member name="M:DarkHouse.Behaviors.IOpenable.IsOpenable">
            <summary>
            Determines whether an object can be opened
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
            <remarks>This method returns <see cref="T:System.Boolean"/> true if the object can be opened</remarks>
        </member>
        <member name="T:DarkHouse.Characters.Guide">
            <summary>
            Class Guide
            </summary>
            <remarks>Defines a game Guide</remarks>
        </member>
        <member name="M:DarkHouse.Characters.Guide.#ctor(System.String,System.String,System.String,DarkHouse.Inventory.IInventory{DarkHouse.Inventory.IItem}[])">
            <summary>
            Constructor of a Guide
            </summary>
            <param name="description">Description of the Guide</param>
            <param name="inventories"><see cref="T:DarkHouse.Inventory.IInventory`1"/> of the Guide</param>
            <param name="title">Guide title</param>
            <param name="name">Guide name</param>
            <remarks>Defines a new Guide with name, title, and description</remarks>
        </member>
        <member name="P:DarkHouse.Characters.Guide.Name">
            <summary>
            Guide name
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the Guide name</remarks>
        </member>
        <member name="P:DarkHouse.Characters.Guide.Title">
            <summary>
            Guide title
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the Guide title</remarks>
        </member>
        <member name="P:DarkHouse.Characters.Guide.Description">
            <summary>
            Guide description
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the Guide description</remarks>
        </member>
        <member name="P:DarkHouse.Characters.Guide.Inventories">
            <summary>
            Player inventories
            </summary>
            <returns><see cref="T:System.Array"/></returns>
            <remarks>Get the Player inventories</remarks>
        </member>
        <member name="T:DarkHouse.Characters.ICharacter">
            <summary>
            ICharacter Interface
            </summary>
            <remarks>Defines a game character</remarks>
        </member>
        <member name="P:DarkHouse.Characters.ICharacter.Name">
            <summary>
            Character name
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the character name</remarks>
        </member>
        <member name="P:DarkHouse.Characters.ICharacter.Title">
            <summary>
            Character title
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the character tag</remarks>
        </member>
        <member name="P:DarkHouse.Characters.ICharacter.Description">
            <summary>
            Character description
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the character tag</remarks>
        </member>
        <member name="P:DarkHouse.Characters.ICharacter.Inventories">
            <summary>
            Character inventories
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get the character inventories</remarks>
        </member>
        <member name="T:DarkHouse.Characters.Player">
            <summary>
            Class Player
            </summary>
            <remarks>Defines a game player</remarks>
        </member>
        <member name="M:DarkHouse.Characters.Player.#ctor(System.String,System.String,System.String,DarkHouse.Inventory.IInventory{DarkHouse.Inventory.IItem}[])">
            <summary>
            Constructor of a Player
            </summary>
            <param name="description">Description of the Player</param>
            <param name="inventories"><see cref="T:DarkHouse.Inventory.IInventory`1"/> of the Player</param>
            <param name="title">Player title</param>
            <param name="name">Player name</param>
            <remarks>Defines a new Player with name, title, and description</remarks>
        </member>
        <member name="P:DarkHouse.Characters.Player.Name">
            <summary>
            Player name
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the Player name</remarks>
        </member>
        <member name="P:DarkHouse.Characters.Player.Title">
            <summary>
            Player title
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the Player title</remarks>
        </member>
        <member name="P:DarkHouse.Characters.Player.Description">
            <summary>
            Player description
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the Player description</remarks>
        </member>
        <member name="P:DarkHouse.Characters.Player.Inventories">
            <summary>
            Player inventories
            </summary>
            <returns><see cref="T:System.Array"/></returns>
            <remarks>Get the Player inventories</remarks>
        </member>
        <member name="T:DarkHouse.Characters.Spook">
            <summary>
            Class Spook
            </summary>
            <remarks>Defines a game Spook</remarks>
        </member>
        <member name="M:DarkHouse.Characters.Spook.#ctor(System.String,System.String,System.String,DarkHouse.Inventory.IInventory{DarkHouse.Inventory.IItem}[])">
            <summary>
            Constructor of a Spook
            </summary>
            <param name="description">Description of the Spook</param>
            <param name="inventories"><see cref="T:DarkHouse.Inventory.IInventory`1"/> of the Spook</param>
            <param name="title">Spook title</param>
            <param name="name">Spook display name</param>
            <remarks>Defines a new Spook with name, title, and description</remarks>
        </member>
        <member name="P:DarkHouse.Characters.Spook.Name">
            <summary>
            Spook name
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the Spook name</remarks>
        </member>
        <member name="P:DarkHouse.Characters.Spook.Title">
            <summary>
            Spook title
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the Spook title</remarks>
        </member>
        <member name="P:DarkHouse.Characters.Spook.Description">
            <summary>
            Spook description
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the Spook description</remarks>
        </member>
        <member name="P:DarkHouse.Characters.Spook.Inventories">
            <summary>
            Player inventories
            </summary>
            <returns><see cref="T:System.Array"/></returns>
            <remarks>Get the Player inventories</remarks>
        </member>
        <member name="T:DarkHouse.Enums.MeasurementUnits">
            <summary>
            MeasurementUnits enum
            </summary>
            <remarks>Measurement units</remarks>
        </member>
        <member name="F:DarkHouse.Enums.MeasurementUnits.Metrics">
            <summary>Metric (0)</summary>
            <remarks>Measurement unit is metric (meter)</remarks>
        </member>
        <member name="F:DarkHouse.Enums.MeasurementUnits.Imperial">
            <summary>Imperial (1)</summary>
            <remarks>Measurement unit is imperial (feet)</remarks>
        </member>
        <member name="T:DarkHouse.Game">
            <summary>
            Class Game
            </summary>
            <remarks>Defines a Game</remarks>
        </member>
        <member name="M:DarkHouse.Game.#ctor(System.String,System.String,System.String,DarkHouse.House.IHouse,DarkHouse.Characters.ICharacter[])">
            <summary>
            Game constructor
            </summary>
            <param name="name">Game name</param>
            <param name="title">Game title</param>
            <param name="description">Game description</param>
            <param name="house">Game house object</param>
            <param name="players">Game player objects</param>
            <remarks>Defines a new Game</remarks>
        </member>
        <member name="P:DarkHouse.Game.House">
            <summary>
            House of current Game
            </summary>
            <returns><see cref="T:DarkHouse.House.IHouse" /></returns>
            <remarks>Returns the current game house</remarks>
        </member>
        <member name="P:DarkHouse.Game.Players">
            <summary>
            Characters of current Game
            </summary>
            <returns>Array of <see cref="T:DarkHouse.Characters.ICharacter" /></returns>
            <remarks>Returns the current game characters</remarks>
        </member>
        <member name="P:DarkHouse.Game.Name">
            <summary>
            Name of current Game
            </summary>
            <returns><see cref="T:System.String" /></returns>
            <remarks>Returns the current game name</remarks>
        </member>
        <member name="P:DarkHouse.Game.Title">
            <summary>
            Title of current Game
            </summary>
            <returns><see cref="T:System.String" /></returns>
            <remarks>Get or set the current game name</remarks>
        </member>
        <member name="P:DarkHouse.Game.Description">
            <summary>
            Description of current Game
            </summary>
            <returns><see cref="T:System.String" /></returns>
            <remarks>Get or set the current description name</remarks>
        </member>
        <member name="M:DarkHouse.Game.GetHashCode">
            <summary>
            Get the hash code of current Game
            </summary>
            <returns><see cref="T:System.Int32" /></returns>
            <remarks>Returns the current game hash code</remarks>
        </member>
        <member name="T:DarkHouse.House.IDoor">
            <summary>
            IDoor Interface
            </summary>
            <remarks>Defines a door</remarks>
        </member>
        <member name="T:DarkHouse.House.IFloor">
            <summary>
            IFloor Interface
            </summary>
            <remarks>Defines a floor</remarks>
        </member>
        <member name="P:DarkHouse.House.IFloor.Rooms">
            <summary>
            Floors in a house
            </summary>
            <returns>Array of <see cref="T:DarkHouse.House.IRoom" /></returns>
            <remarks>Get the rooms of a floor</remarks>
        </member>
        <member name="T:DarkHouse.House.IHouse">
            <summary>
            IHouse Interface
            </summary>
            <remarks>Defines a house</remarks>
        </member>
        <member name="P:DarkHouse.House.IHouse.Floors">
            <summary>
            Floors in a house
            </summary>
            <returns>Array of <see cref="T:DarkHouse.House.IFloor" /></returns>
            <remarks>Get the floors of a house</remarks>
        </member>
        <member name="T:DarkHouse.House.IHousePart">
            <summary>
            IHousePart Interface
            </summary>
            <remarks>Defines a house part</remarks>
        </member>
        <member name="P:DarkHouse.House.IHousePart.Name">
            <summary>
            House part name
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the house part name</remarks>
        </member>
        <member name="P:DarkHouse.House.IHousePart.Tag">
            <summary>
            House part tag
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the house part tag</remarks>
        </member>
        <member name="P:DarkHouse.House.IHousePart.Description">
            <summary>
            House part description
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the house part tag</remarks>
        </member>
        <member name="T:DarkHouse.House.IKey">
            <summary>
            IKey Interface
            </summary>
            <remarks>Defines a key</remarks>
        </member>
        <member name="M:DarkHouse.House.IKey.MatchLock(DarkHouse.House.ILock)">
            <summary>
            Determines whether a key matches a lock
            </summary>
            <returns>see cref="bool" /></returns>
            <remarks>Returns true if key match lock</remarks>
        </member>
        <member name="T:DarkHouse.House.ILock">
            <summary>
            ILock Interface
            </summary>
            <remarks>Defines a lock</remarks>
        </member>
        <member name="M:DarkHouse.House.ILock.HasKey">
            <summary>
            Determines whether an item has a key
            </summary>
            <returns>see cref="bool" /></returns>
            <remarks>Returns true if the item has a key</remarks>
        </member>
        <member name="T:DarkHouse.House.IRoom">
            <summary>
            IRoom Interface
            </summary>
            <remarks>Defines a room</remarks>
        </member>
        <member name="T:DarkHouse.House.IWindow">
            <summary>
            IWindow Interface
            </summary>
            <remarks>Defines a window</remarks>
        </member>
        <member name="T:DarkHouse.Inventory.IInventory`1">
            <summary>
            IInventory Interface
            </summary>
            <remarks>Defines area of an inventory</remarks>
        </member>
        <member name="P:DarkHouse.Inventory.IInventory`1.Name">
            <summary>
            Inventory name
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the inventory name</remarks>
        </member>
        <member name="P:DarkHouse.Inventory.IInventory`1.Tag">
            <summary>
            Inventory tag
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the inventory tag</remarks>
        </member>
        <member name="P:DarkHouse.Inventory.IInventory`1.Description">
            <summary>
            Inventory description
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the inventory tag</remarks>
        </member>
        <member name="M:DarkHouse.Inventory.IInventory`1.Add(`0)">
            <summary>
            Add item to the inventory
            </summary>
            <param name="item">Item to add</param>
            <remarks>Add an item to the inventory</remarks>
        </member>
        <member name="M:DarkHouse.Inventory.IInventory`1.Remove(System.Int32)">
            <summary>
            Remove item from an inventory
            </summary>
            <param name="index">Index of item to remove</param>
            <remarks>Search and remove item from the inventory at the selected index <paramref name="index"/></remarks>
        </member>
        <member name="M:DarkHouse.Inventory.IInventory`1.Remove(System.String)">
            <summary>
            Remove item(s) from an inventory
            </summary>
            <param name="itemName">Item name to remove</param>
            <remarks>Search and remove item(s) from the inventory using item name <paramref name="itemName"/></remarks>
        </member>
        <member name="M:DarkHouse.Inventory.IInventory`1.GetItem(System.Int32)">
            <summary>
            Get item from an inventory
            </summary>
            <param name="index">Index of item to search</param>
            <returns><typeparamref name="IItem" /></returns>
            <remarks>Get the inventory item at the selected index <paramref name="index"/></remarks>
        </member>
        <member name="M:DarkHouse.Inventory.IInventory`1.GetItems(System.String)">
            <summary>
            Get item(s) from an inventory
            </summary>
            <param name="itemName">Item name to search</param>
            <returns>Array of <typeparamref name="IItem" /></returns>
            <remarks>Get item(s) from the inventory using item name <paramref name="itemName"/></remarks>
        </member>
        <member name="T:DarkHouse.Inventory.IItem">
            <summary>
            IItem Interface
            </summary>
            <remarks>Defines area of an item</remarks>
        </member>
        <member name="P:DarkHouse.Inventory.IItem.Name">
            <summary>
            Item name
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the item name</remarks>
        </member>
        <member name="P:DarkHouse.Inventory.IItem.Tag">
            <summary>
            Item tag
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the item tag</remarks>
        </member>
        <member name="P:DarkHouse.Inventory.IItem.Description">
            <summary>
            Item description
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Get or set the item tag</remarks>
        </member>
        <member name="T:DarkHouse.Shapes.IArea">
            <summary>
            IArea Interface
            </summary>
            <remarks>Defines area of a shape</remarks>
        </member>
        <member name="M:DarkHouse.Shapes.IArea.Area">
            <summary>
            Get the area for a shape
            </summary>
            <returns><see cref="T:System.Single"/></returns>
            <remarks>Each individual shape will need to implement this method with their unique formulation</remarks>
        </member>
        <member name="T:DarkHouse.Shapes.IShape">
            <summary>
            IShape Interface
            </summary>
            <remarks>Defines a shape</remarks>
        </member>
        <member name="P:DarkHouse.Shapes.IShape.Name">
            <summary>
            Shape name
            </summary>
            <returns><see cref="T:System.String"/></returns>
            <remarks>Returns a shape name</remarks>
        </member>
        <member name="P:DarkHouse.Shapes.IShape.Sides">
            <summary>
            Sides for a shape
            </summary>
            <returns>Array of <see cref="T:DarkHouse.Shapes.Side"/></returns>
            <remarks>Returns the sides (array of <see cref="T:DarkHouse.Shapes.Side"/>) for a shape</remarks>
        </member>
        <member name="P:DarkHouse.Shapes.IShape.Angles">
            <summary>
            Angles for a pair of sides
            </summary>
            <returns>Array of <see cref="T:System.Single"/></returns>
            <remarks>
            Returns the angles for a shape.
            Total of angles must be 360 degrees.
            Angles count counter clockwise from bottom-most left-most point.
            </remarks>
        </member>
        <member name="M:DarkHouse.Shapes.IShape.Perimeter">
            <summary>
            Perimeter of a shape
            </summary>
            <returns><see cref="T:System.Single"/></returns>
            <remarks>Returns the total perimeter of a shape</remarks>
        </member>
        <member name="T:DarkHouse.Shapes.IShape2D">
            <summary>
            IShape2D Interface
            </summary>
            <remarks>Defines a two dimensional shape (2D shape)</remarks>
        </member>
        <member name="P:DarkHouse.Shapes.IShape2D.SidesCount">
            <summary>
            Number of sides for a shape
            </summary>
            <returns><see cref="T:System.Int32"/></returns>
            <remarks>Returns the number of sides</remarks>
        </member>
        <member name="T:DarkHouse.Shapes.IShape3D">
            <summary>
            IShape3D Interface
            </summary>
            <remarks>Defines a three dimensional shape (3D shape)</remarks>
        </member>
        <member name="P:DarkHouse.Shapes.IShape3D.SidesCount">
            <summary>
            Get the number of sides of a 3D shape
            </summary>
            <returns><see cref="T:System.Int32"/></returns>
            <remarks>Returns the number of faces for a 3D shape</remarks>
        </member>
        <member name="P:DarkHouse.Shapes.IShape3D.EdgesCount">
            <summary>
            Get the number of edges of a 3D shape
            </summary>
            <returns><see cref="T:System.Int32"/></returns>
            <remarks>Returns the number of edges for a 3D shape</remarks>
        </member>
        <member name="P:DarkHouse.Shapes.IShape3D.VerticesCount">
            <summary>
            Get the number of vertices of a 3D shape
            </summary>
            <returns><see cref="T:System.Int32"/></returns>
            <remarks>Returns the number of vertices for a 3D shape</remarks>
        </member>
        <member name="T:DarkHouse.Shapes.ISpace">
            <summary>
            ISpace Interface
            </summary>
            <remarks>Defines a space</remarks>
        </member>
        <member name="P:DarkHouse.Shapes.ISpace.InitialPoint">
            <summary>
            Get or set the initial coordinate for a space
            </summary>
            <remarks>Defines the initial coordinate for a space using a Point struct</remarks>
        </member>
        <member name="T:DarkHouse.Shapes.ISpace3D">
            <summary>
            ISpace3D Interface
            </summary>
            <remarks>Defines a 3D space</remarks>
        </member>
        <member name="T:DarkHouse.Shapes.ISpace2D">
            <summary>
            ISpace2D Interface
            </summary>
            <remarks>Defines a 2D space</remarks>
        </member>
        <member name="T:DarkHouse.Shapes.IVolume">
            <summary>
            IVolume Interface
            </summary>
            <remarks>Defines volume of a shape</remarks>
        </member>
        <member name="M:DarkHouse.Shapes.IVolume.Volume">
            <summary>
            Get the volume for a shape
            </summary>
            <returns><see cref="T:System.Single"/></returns>
            <remarks>Each individual shape will need to implement this method with their unique formulation</remarks>
        </member>
        <member name="T:DarkHouse.Shapes.Side">
            <summary>
            Side struct
            </summary>
            <remarks>Defines side of a shape</remarks>
        </member>
        <member name="M:DarkHouse.Shapes.Side.#ctor(System.Single)">
            <summary>
            Constructor of a Side
            </summary>
            <param name="length">Value of the Length <see cref="T:System.Single"/></param>
            <remarks>Defines a new side with a given length</remarks>
        </member>
        <member name="P:DarkHouse.Shapes.Side.Length">
            <summary>
            Length of a side
            </summary>
            <returns><see cref="T:System.Single"/></returns>
            <remarks>Get or set the length of a side</remarks>
        </member>
    </members>
</doc>
